// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.0
// source: shared/license/license.proto

package licenseproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *License_Metadata     `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SupportContact *License_Contact      `protobuf:"bytes,2,opt,name=support_contact,json=supportContact,proto3" json:"support_contact,omitempty"`
	Restrictions   *License_Restrictions `protobuf:"bytes,3,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_license_license_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_shared_license_license_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_shared_license_license_proto_rawDescGZIP(), []int{0}
}

func (x *License) GetMetadata() *License_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *License) GetSupportContact() *License_Contact {
	if x != nil {
		return x.SupportContact
	}
	return nil
}

func (x *License) GetRestrictions() *License_Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type License_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *License_Contact) Reset() {
	*x = License_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_license_license_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Contact) ProtoMessage() {}

func (x *License_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_shared_license_license_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Contact.ProtoReflect.Descriptor instead.
func (*License_Contact) Descriptor() ([]byte, []int) {
	return file_shared_license_license_proto_rawDescGZIP(), []int{0, 0}
}

func (x *License_Contact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *License_Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *License_Contact) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *License_Contact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type License_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SigningKeyId    string                 `protobuf:"bytes,2,opt,name=signing_key_id,json=signingKeyId,proto3" json:"signing_key_id,omitempty"`
	IssueDate       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	LicensedForId   string                 `protobuf:"bytes,4,opt,name=licensed_for_id,json=licensedForId,proto3" json:"licensed_for_id,omitempty"`
	LicensedForName string                 `protobuf:"bytes,5,opt,name=licensed_for_name,json=licensedForName,proto3" json:"licensed_for_name,omitempty"`
}

func (x *License_Metadata) Reset() {
	*x = License_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_license_license_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Metadata) ProtoMessage() {}

func (x *License_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_shared_license_license_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Metadata.ProtoReflect.Descriptor instead.
func (*License_Metadata) Descriptor() ([]byte, []int) {
	return file_shared_license_license_proto_rawDescGZIP(), []int{0, 1}
}

func (x *License_Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *License_Metadata) GetSigningKeyId() string {
	if x != nil {
		return x.SigningKeyId
	}
	return ""
}

func (x *License_Metadata) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *License_Metadata) GetLicensedForId() string {
	if x != nil {
		return x.LicensedForId
	}
	return ""
}

func (x *License_Metadata) GetLicensedForName() string {
	if x != nil {
		return x.LicensedForName
	}
	return ""
}

type License_Restrictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotValidBefore *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=not_valid_before,json=notValidBefore,proto3" json:"not_valid_before,omitempty"`
	NotValidAfter  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=not_valid_after,json=notValidAfter,proto3" json:"not_valid_after,omitempty"`
	// URL for on-line license enforcement. Must be set unless allow_offline is true.
	EnforcementUrl string `protobuf:"bytes,3,opt,name=enforcement_url,json=enforcementUrl,proto3" json:"enforcement_url,omitempty"`
	// Allow offline use (i.e., no online license enforcement).
	AllowOffline bool `protobuf:"varint,4,opt,name=allow_offline,json=allowOffline,proto3" json:"allow_offline,omitempty"`
	// Maximum number of nodes. Must be set unless no_node_restriction is true.
	MaxNodes int32 `protobuf:"varint,5,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	// Do not restrict the number of nodes.
	NoNodeRestriction bool `protobuf:"varint,6,opt,name=no_node_restriction,json=noNodeRestriction,proto3" json:"no_node_restriction,omitempty"`
	// Build flavors of the product this license is valid for (e.g., "development" or "release"). Must be set unless
	// no_build_flavor_restriction is true.
	BuildFlavors []string `protobuf:"bytes,7,rep,name=build_flavors,json=buildFlavors,proto3" json:"build_flavors,omitempty"`
	// Do not restrict license to certain build flavors.
	NoBuildFlavorRestriction bool `protobuf:"varint,8,opt,name=no_build_flavor_restriction,json=noBuildFlavorRestriction,proto3" json:"no_build_flavor_restriction,omitempty"`
	// Deployment environments that are valid for the product, such as `gcp` or `gcp/ultra-current-825`. Must be
	// set unless no_deployment_environment_restriction is true.
	DeploymentEnvironments []string `protobuf:"bytes,9,rep,name=deployment_environments,json=deploymentEnvironments,proto3" json:"deployment_environments,omitempty"`
	// Do not restrict license to certain deployment environments.
	NoDeploymentEnvironmentRestriction bool `protobuf:"varint,10,opt,name=no_deployment_environment_restriction,json=noDeploymentEnvironmentRestriction,proto3" json:"no_deployment_environment_restriction,omitempty"`
}

func (x *License_Restrictions) Reset() {
	*x = License_Restrictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_license_license_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_Restrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Restrictions) ProtoMessage() {}

func (x *License_Restrictions) ProtoReflect() protoreflect.Message {
	mi := &file_shared_license_license_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Restrictions.ProtoReflect.Descriptor instead.
func (*License_Restrictions) Descriptor() ([]byte, []int) {
	return file_shared_license_license_proto_rawDescGZIP(), []int{0, 2}
}

func (x *License_Restrictions) GetNotValidBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotValidBefore
	}
	return nil
}

func (x *License_Restrictions) GetNotValidAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotValidAfter
	}
	return nil
}

func (x *License_Restrictions) GetEnforcementUrl() string {
	if x != nil {
		return x.EnforcementUrl
	}
	return ""
}

func (x *License_Restrictions) GetAllowOffline() bool {
	if x != nil {
		return x.AllowOffline
	}
	return false
}

func (x *License_Restrictions) GetMaxNodes() int32 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *License_Restrictions) GetNoNodeRestriction() bool {
	if x != nil {
		return x.NoNodeRestriction
	}
	return false
}

func (x *License_Restrictions) GetBuildFlavors() []string {
	if x != nil {
		return x.BuildFlavors
	}
	return nil
}

func (x *License_Restrictions) GetNoBuildFlavorRestriction() bool {
	if x != nil {
		return x.NoBuildFlavorRestriction
	}
	return false
}

func (x *License_Restrictions) GetDeploymentEnvironments() []string {
	if x != nil {
		return x.DeploymentEnvironments
	}
	return nil
}

func (x *License_Restrictions) GetNoDeploymentEnvironmentRestriction() bool {
	if x != nil {
		return x.NoDeploymentEnvironmentRestriction
	}
	return false
}

var File_shared_license_license_proto protoreflect.FileDescriptor

var file_shared_license_license_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x08, 0x0a, 0x07, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x5b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xcf,
	0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xa3, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6e,
	0x6f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x6e, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x25, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x6e, 0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2a, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x5a, 0x0e, 0x2e, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shared_license_license_proto_rawDescOnce sync.Once
	file_shared_license_license_proto_rawDescData = file_shared_license_license_proto_rawDesc
)

func file_shared_license_license_proto_rawDescGZIP() []byte {
	file_shared_license_license_proto_rawDescOnce.Do(func() {
		file_shared_license_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_shared_license_license_proto_rawDescData)
	})
	return file_shared_license_license_proto_rawDescData
}

var file_shared_license_license_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_shared_license_license_proto_goTypes = []interface{}{
	(*License)(nil),               // 0: license.License
	(*License_Contact)(nil),       // 1: license.License.Contact
	(*License_Metadata)(nil),      // 2: license.License.Metadata
	(*License_Restrictions)(nil),  // 3: license.License.Restrictions
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_shared_license_license_proto_depIdxs = []int32{
	2, // 0: license.License.metadata:type_name -> license.License.Metadata
	1, // 1: license.License.support_contact:type_name -> license.License.Contact
	3, // 2: license.License.restrictions:type_name -> license.License.Restrictions
	4, // 3: license.License.Metadata.issue_date:type_name -> google.protobuf.Timestamp
	4, // 4: license.License.Restrictions.not_valid_before:type_name -> google.protobuf.Timestamp
	4, // 5: license.License.Restrictions.not_valid_after:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_shared_license_license_proto_init() }
func file_shared_license_license_proto_init() {
	if File_shared_license_license_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shared_license_license_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_license_license_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_license_license_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_license_license_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_Restrictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shared_license_license_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_license_license_proto_goTypes,
		DependencyIndexes: file_shared_license_license_proto_depIdxs,
		MessageInfos:      file_shared_license_license_proto_msgTypes,
	}.Build()
	File_shared_license_license_proto = out.File
	file_shared_license_license_proto_rawDesc = nil
	file_shared_license_license_proto_goTypes = nil
	file_shared_license_license_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.0
// source: storage/compliance_operator_v2.proto

package storage

import (
	_ "./tools"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the role of the node within the cluster
type NodeRole int32

const (
	NodeRole_INFRA  NodeRole = 0
	NodeRole_WORKER NodeRole = 1
	NodeRole_MASTER NodeRole = 2
)

// Enum value maps for NodeRole.
var (
	NodeRole_name = map[int32]string{
		0: "INFRA",
		1: "WORKER",
		2: "MASTER",
	}
	NodeRole_value = map[string]int32{
		"INFRA":  0,
		"WORKER": 1,
		"MASTER": 2,
	}
)

func (x NodeRole) Enum() *NodeRole {
	p := new(NodeRole)
	*p = x
	return p
}

func (x NodeRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeRole) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_compliance_operator_v2_proto_enumTypes[0].Descriptor()
}

func (NodeRole) Type() protoreflect.EnumType {
	return &file_storage_compliance_operator_v2_proto_enumTypes[0]
}

func (x NodeRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeRole.Descriptor instead.
func (NodeRole) EnumDescriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{0}
}

// Represents the scan type whether a node or platform scan.
type ScanType int32

const (
	ScanType_UNSET_SCAN_TYPE ScanType = 0
	ScanType_NODE_SCAN       ScanType = 1
	ScanType_PLATFORM_SCAN   ScanType = 2
)

// Enum value maps for ScanType.
var (
	ScanType_name = map[int32]string{
		0: "UNSET_SCAN_TYPE",
		1: "NODE_SCAN",
		2: "PLATFORM_SCAN",
	}
	ScanType_value = map[string]int32{
		"UNSET_SCAN_TYPE": 0,
		"NODE_SCAN":       1,
		"PLATFORM_SCAN":   2,
	}
)

func (x ScanType) Enum() *ScanType {
	p := new(ScanType)
	*p = x
	return p
}

func (x ScanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_compliance_operator_v2_proto_enumTypes[1].Descriptor()
}

func (ScanType) Type() protoreflect.EnumType {
	return &file_storage_compliance_operator_v2_proto_enumTypes[1]
}

func (x ScanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanType.Descriptor instead.
func (ScanType) EnumDescriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{1}
}

// Represents the severity of the rule
type RuleSeverity int32

const (
	RuleSeverity_UNSET_RULE_SEVERITY   RuleSeverity = 0
	RuleSeverity_UNKNOWN_RULE_SEVERITY RuleSeverity = 1
	RuleSeverity_INFO_RULE_SEVERITY    RuleSeverity = 2
	RuleSeverity_LOW_RULE_SEVERITY     RuleSeverity = 3
	RuleSeverity_MEDIUM_RULE_SEVERITY  RuleSeverity = 4
	RuleSeverity_HIGH_RULE_SEVERITY    RuleSeverity = 5
)

// Enum value maps for RuleSeverity.
var (
	RuleSeverity_name = map[int32]string{
		0: "UNSET_RULE_SEVERITY",
		1: "UNKNOWN_RULE_SEVERITY",
		2: "INFO_RULE_SEVERITY",
		3: "LOW_RULE_SEVERITY",
		4: "MEDIUM_RULE_SEVERITY",
		5: "HIGH_RULE_SEVERITY",
	}
	RuleSeverity_value = map[string]int32{
		"UNSET_RULE_SEVERITY":   0,
		"UNKNOWN_RULE_SEVERITY": 1,
		"INFO_RULE_SEVERITY":    2,
		"LOW_RULE_SEVERITY":     3,
		"MEDIUM_RULE_SEVERITY":  4,
		"HIGH_RULE_SEVERITY":    5,
	}
)

func (x RuleSeverity) Enum() *RuleSeverity {
	p := new(RuleSeverity)
	*p = x
	return p
}

func (x RuleSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_compliance_operator_v2_proto_enumTypes[2].Descriptor()
}

func (RuleSeverity) Type() protoreflect.EnumType {
	return &file_storage_compliance_operator_v2_proto_enumTypes[2]
}

func (x RuleSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleSeverity.Descriptor instead.
func (RuleSeverity) EnumDescriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{2}
}

type ComplianceOperatorCheckResultV2_CheckStatus int32

const (
	ComplianceOperatorCheckResultV2_UNSET          ComplianceOperatorCheckResultV2_CheckStatus = 0
	ComplianceOperatorCheckResultV2_PASS           ComplianceOperatorCheckResultV2_CheckStatus = 1
	ComplianceOperatorCheckResultV2_FAIL           ComplianceOperatorCheckResultV2_CheckStatus = 2
	ComplianceOperatorCheckResultV2_ERROR          ComplianceOperatorCheckResultV2_CheckStatus = 3
	ComplianceOperatorCheckResultV2_INFO           ComplianceOperatorCheckResultV2_CheckStatus = 4
	ComplianceOperatorCheckResultV2_MANUAL         ComplianceOperatorCheckResultV2_CheckStatus = 5
	ComplianceOperatorCheckResultV2_NOT_APPLICABLE ComplianceOperatorCheckResultV2_CheckStatus = 6
	ComplianceOperatorCheckResultV2_INCONSISTENT   ComplianceOperatorCheckResultV2_CheckStatus = 7
)

// Enum value maps for ComplianceOperatorCheckResultV2_CheckStatus.
var (
	ComplianceOperatorCheckResultV2_CheckStatus_name = map[int32]string{
		0: "UNSET",
		1: "PASS",
		2: "FAIL",
		3: "ERROR",
		4: "INFO",
		5: "MANUAL",
		6: "NOT_APPLICABLE",
		7: "INCONSISTENT",
	}
	ComplianceOperatorCheckResultV2_CheckStatus_value = map[string]int32{
		"UNSET":          0,
		"PASS":           1,
		"FAIL":           2,
		"ERROR":          3,
		"INFO":           4,
		"MANUAL":         5,
		"NOT_APPLICABLE": 6,
		"INCONSISTENT":   7,
	}
)

func (x ComplianceOperatorCheckResultV2_CheckStatus) Enum() *ComplianceOperatorCheckResultV2_CheckStatus {
	p := new(ComplianceOperatorCheckResultV2_CheckStatus)
	*p = x
	return p
}

func (x ComplianceOperatorCheckResultV2_CheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplianceOperatorCheckResultV2_CheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_compliance_operator_v2_proto_enumTypes[3].Descriptor()
}

func (ComplianceOperatorCheckResultV2_CheckStatus) Type() protoreflect.EnumType {
	return &file_storage_compliance_operator_v2_proto_enumTypes[3]
}

func (x ComplianceOperatorCheckResultV2_CheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplianceOperatorCheckResultV2_CheckStatus.Descriptor instead.
func (ComplianceOperatorCheckResultV2_CheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{5, 0}
}

type ProfileShim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId   string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ProfileName string `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *ProfileShim) Reset() {
	*x = ProfileShim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileShim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileShim) ProtoMessage() {}

func (x *ProfileShim) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileShim.ProtoReflect.Descriptor instead.
func (*ProfileShim) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileShim) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ProfileShim) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

// Next Tag: 13
type ComplianceOperatorProfileV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProfileId      string                              `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Name           string                              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ProfileVersion string                              `protobuf:"bytes,4,opt,name=profile_version,json=profileVersion,proto3" json:"profile_version,omitempty"`
	ProductType    []string                            `protobuf:"bytes,5,rep,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	Standard       string                              `protobuf:"bytes,6,opt,name=standard,proto3" json:"standard,omitempty"`
	Labels         map[string]string                   `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations    map[string]string                   `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description    string                              `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Rules          []*ComplianceOperatorProfileV2_Rule `protobuf:"bytes,10,rep,name=rules,proto3" json:"rules,omitempty"`
	Product        string                              `protobuf:"bytes,11,opt,name=product,proto3" json:"product,omitempty"`
	Title          string                              `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ComplianceOperatorProfileV2) Reset() {
	*x = ComplianceOperatorProfileV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorProfileV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorProfileV2) ProtoMessage() {}

func (x *ComplianceOperatorProfileV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorProfileV2.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorProfileV2) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{1}
}

func (x *ComplianceOperatorProfileV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceOperatorProfileV2) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ComplianceOperatorProfileV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceOperatorProfileV2) GetProfileVersion() string {
	if x != nil {
		return x.ProfileVersion
	}
	return ""
}

func (x *ComplianceOperatorProfileV2) GetProductType() []string {
	if x != nil {
		return x.ProductType
	}
	return nil
}

func (x *ComplianceOperatorProfileV2) GetStandard() string {
	if x != nil {
		return x.Standard
	}
	return ""
}

func (x *ComplianceOperatorProfileV2) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComplianceOperatorProfileV2) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ComplianceOperatorProfileV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceOperatorProfileV2) GetRules() []*ComplianceOperatorProfileV2_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ComplianceOperatorProfileV2) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *ComplianceOperatorProfileV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Next Tag: 12
type ComplianceOperatorRuleV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OperatorVersion string            `protobuf:"bytes,2,opt,name=operator_version,json=operatorVersion,proto3" json:"operator_version,omitempty"`
	RuleVersion     string            `protobuf:"bytes,3,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	RuleType        string            `protobuf:"bytes,4,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`
	Severity        RuleSeverity      `protobuf:"varint,5,opt,name=severity,proto3,enum=storage.RuleSeverity" json:"severity,omitempty"`
	Labels          map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations     map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Title           string            `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Description     string            `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Rationale       string            `protobuf:"bytes,10,opt,name=rationale,proto3" json:"rationale,omitempty"`
	Fixes           string            `protobuf:"bytes,11,opt,name=fixes,proto3" json:"fixes,omitempty"`
}

func (x *ComplianceOperatorRuleV2) Reset() {
	*x = ComplianceOperatorRuleV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorRuleV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorRuleV2) ProtoMessage() {}

func (x *ComplianceOperatorRuleV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorRuleV2.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorRuleV2) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{2}
}

func (x *ComplianceOperatorRuleV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceOperatorRuleV2) GetOperatorVersion() string {
	if x != nil {
		return x.OperatorVersion
	}
	return ""
}

func (x *ComplianceOperatorRuleV2) GetRuleVersion() string {
	if x != nil {
		return x.RuleVersion
	}
	return ""
}

func (x *ComplianceOperatorRuleV2) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *ComplianceOperatorRuleV2) GetSeverity() RuleSeverity {
	if x != nil {
		return x.Severity
	}
	return RuleSeverity_UNSET_RULE_SEVERITY
}

func (x *ComplianceOperatorRuleV2) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComplianceOperatorRuleV2) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ComplianceOperatorRuleV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ComplianceOperatorRuleV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceOperatorRuleV2) GetRationale() string {
	if x != nil {
		return x.Rationale
	}
	return ""
}

func (x *ComplianceOperatorRuleV2) GetFixes() string {
	if x != nil {
		return x.Fixes
	}
	return ""
}

// Next Tag: 15
type ComplianceOperatorScanConfigurationV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanName               string            `protobuf:"bytes,2,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	AutoApplyRemediations  bool              `protobuf:"varint,3,opt,name=auto_apply_remediations,json=autoApplyRemediations,proto3" json:"auto_apply_remediations,omitempty"`
	AutoUpdateRemediations bool              `protobuf:"varint,4,opt,name=auto_update_remediations,json=autoUpdateRemediations,proto3" json:"auto_update_remediations,omitempty"`
	OneTimeScan            bool              `protobuf:"varint,5,opt,name=one_time_scan,json=oneTimeScan,proto3" json:"one_time_scan,omitempty"`
	Labels                 map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations            map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Profiles               []*ProfileShim    `protobuf:"bytes,8,rep,name=profiles,proto3" json:"profiles,omitempty"`
	NodeRoles              []NodeRole        `protobuf:"varint,9,rep,packed,name=node_roles,json=nodeRoles,proto3,enum=storage.NodeRole" json:"node_roles,omitempty"`
	// Will be configurable via env var
	StrictNodeScan bool `protobuf:"varint,10,opt,name=strict_node_scan,json=strictNodeScan,proto3" json:"strict_node_scan,omitempty"`
	// Starting point for schedule will probably have to build upon it
	Schedule        *Schedule              `protobuf:"bytes,11,opt,name=schedule,proto3" json:"schedule,omitempty"`
	CreatedTime     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastUpdatedTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Most recent user to update the scan configurations
	ModifiedBy *SlimUser `protobuf:"bytes,14,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
}

func (x *ComplianceOperatorScanConfigurationV2) Reset() {
	*x = ComplianceOperatorScanConfigurationV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorScanConfigurationV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorScanConfigurationV2) ProtoMessage() {}

func (x *ComplianceOperatorScanConfigurationV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorScanConfigurationV2.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorScanConfigurationV2) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{3}
}

func (x *ComplianceOperatorScanConfigurationV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceOperatorScanConfigurationV2) GetScanName() string {
	if x != nil {
		return x.ScanName
	}
	return ""
}

func (x *ComplianceOperatorScanConfigurationV2) GetAutoApplyRemediations() bool {
	if x != nil {
		return x.AutoApplyRemediations
	}
	return false
}

func (x *ComplianceOperatorScanConfigurationV2) GetAutoUpdateRemediations() bool {
	if x != nil {
		return x.AutoUpdateRemediations
	}
	return false
}

func (x *ComplianceOperatorScanConfigurationV2) GetOneTimeScan() bool {
	if x != nil {
		return x.OneTimeScan
	}
	return false
}

func (x *ComplianceOperatorScanConfigurationV2) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComplianceOperatorScanConfigurationV2) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ComplianceOperatorScanConfigurationV2) GetProfiles() []*ProfileShim {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ComplianceOperatorScanConfigurationV2) GetNodeRoles() []NodeRole {
	if x != nil {
		return x.NodeRoles
	}
	return nil
}

func (x *ComplianceOperatorScanConfigurationV2) GetStrictNodeScan() bool {
	if x != nil {
		return x.StrictNodeScan
	}
	return false
}

func (x *ComplianceOperatorScanConfigurationV2) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ComplianceOperatorScanConfigurationV2) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ComplianceOperatorScanConfigurationV2) GetLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTime
	}
	return nil
}

func (x *ComplianceOperatorScanConfigurationV2) GetModifiedBy() *SlimUser {
	if x != nil {
		return x.ModifiedBy
	}
	return nil
}

// Next Tag: 6
// Cluster and an error if necessary to handle cases where the scan configuration is
// unable to be applied to a cluster for whatever reason.
type ComplianceOperatorClusterScanConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ScanId          string                 `protobuf:"bytes,2,opt,name=scan_id,json=scanId,proto3" json:"scan_id,omitempty"`
	Errors          []string               `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	LastUpdatedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	ClusterName     string                 `protobuf:"bytes,5,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *ComplianceOperatorClusterScanConfigStatus) Reset() {
	*x = ComplianceOperatorClusterScanConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorClusterScanConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorClusterScanConfigStatus) ProtoMessage() {}

func (x *ComplianceOperatorClusterScanConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorClusterScanConfigStatus.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorClusterScanConfigStatus) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{4}
}

func (x *ComplianceOperatorClusterScanConfigStatus) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceOperatorClusterScanConfigStatus) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

func (x *ComplianceOperatorClusterScanConfigStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ComplianceOperatorClusterScanConfigStatus) GetLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTime
	}
	return nil
}

func (x *ComplianceOperatorClusterScanConfigStatus) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

// Next Tag: 18
// This object has been flattened vs joining with rule.  The rationale is to spend the time to query rule
// while processing results vs reporting them to the user.  Additionally, flattening it helps with the historical data
// as the rules can change without impacting the historical result.
type ComplianceOperatorCheckResultV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckId        string                                      `protobuf:"bytes,2,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	CheckName      string                                      `protobuf:"bytes,3,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	ClusterId      string                                      `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName    string                                      `protobuf:"bytes,15,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Status         ComplianceOperatorCheckResultV2_CheckStatus `protobuf:"varint,5,opt,name=status,proto3,enum=storage.ComplianceOperatorCheckResultV2_CheckStatus" json:"status,omitempty"`
	Severity       RuleSeverity                                `protobuf:"varint,6,opt,name=severity,proto3,enum=storage.RuleSeverity" json:"severity,omitempty"`
	Description    string                                      `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Instructions   string                                      `protobuf:"bytes,8,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Labels         map[string]string                           `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations    map[string]string                           `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedTime    *timestamppb.Timestamp                      `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	Standard       string                                      `protobuf:"bytes,12,opt,name=standard,proto3" json:"standard,omitempty"`
	Control        string                                      `protobuf:"bytes,13,opt,name=control,proto3" json:"control,omitempty"`
	ScanId         string                                      `protobuf:"bytes,14,opt,name=scan_id,json=scanId,proto3" json:"scan_id,omitempty"`
	ScanConfigId   string                                      `protobuf:"bytes,16,opt,name=scan_config_id,json=scanConfigId,proto3" json:"scan_config_id,omitempty"`
	ScanConfigName string                                      `protobuf:"bytes,17,opt,name=scan_config_name,json=scanConfigName,proto3" json:"scan_config_name,omitempty"`
}

func (x *ComplianceOperatorCheckResultV2) Reset() {
	*x = ComplianceOperatorCheckResultV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorCheckResultV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorCheckResultV2) ProtoMessage() {}

func (x *ComplianceOperatorCheckResultV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorCheckResultV2.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorCheckResultV2) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{5}
}

func (x *ComplianceOperatorCheckResultV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetCheckId() string {
	if x != nil {
		return x.CheckId
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetCheckName() string {
	if x != nil {
		return x.CheckName
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetStatus() ComplianceOperatorCheckResultV2_CheckStatus {
	if x != nil {
		return x.Status
	}
	return ComplianceOperatorCheckResultV2_UNSET
}

func (x *ComplianceOperatorCheckResultV2) GetSeverity() RuleSeverity {
	if x != nil {
		return x.Severity
	}
	return RuleSeverity_UNSET_RULE_SEVERITY
}

func (x *ComplianceOperatorCheckResultV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComplianceOperatorCheckResultV2) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ComplianceOperatorCheckResultV2) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ComplianceOperatorCheckResultV2) GetStandard() string {
	if x != nil {
		return x.Standard
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetScanConfigId() string {
	if x != nil {
		return x.ScanConfigId
	}
	return ""
}

func (x *ComplianceOperatorCheckResultV2) GetScanConfigName() string {
	if x != nil {
		return x.ScanConfigName
	}
	return ""
}

type ScanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase    string   `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Result   string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Warnings []string `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ScanStatus) Reset() {
	*x = ScanStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanStatus) ProtoMessage() {}

func (x *ScanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanStatus.ProtoReflect.Descriptor instead.
func (*ScanStatus) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{6}
}

func (x *ScanStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ScanStatus) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ScanStatus) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Next Tag: 15
// Scan object per cluster
type ComplianceOperatorScanV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanConfigId     string                 `protobuf:"bytes,2,opt,name=scan_config_id,json=scanConfigId,proto3" json:"scan_config_id,omitempty"`
	ScanName         string                 `protobuf:"bytes,14,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ClusterId        string                 `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName      string                 `protobuf:"bytes,13,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Errors           []string               `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	Profile          []*ProfileShim         `protobuf:"bytes,5,rep,name=profile,proto3" json:"profile,omitempty"`
	Labels           map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations      map[string]string      `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScanType         ScanType               `protobuf:"varint,8,opt,name=scan_type,json=scanType,proto3,enum=storage.ScanType" json:"scan_type,omitempty"`
	NodeSelector     NodeRole               `protobuf:"varint,9,opt,name=node_selector,json=nodeSelector,proto3,enum=storage.NodeRole" json:"node_selector,omitempty"`
	Status           *ScanStatus            `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	CreatedTime      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	LastExecutedTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_executed_time,json=lastExecutedTime,proto3" json:"last_executed_time,omitempty"`
}

func (x *ComplianceOperatorScanV2) Reset() {
	*x = ComplianceOperatorScanV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorScanV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorScanV2) ProtoMessage() {}

func (x *ComplianceOperatorScanV2) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorScanV2.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorScanV2) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{7}
}

func (x *ComplianceOperatorScanV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceOperatorScanV2) GetScanConfigId() string {
	if x != nil {
		return x.ScanConfigId
	}
	return ""
}

func (x *ComplianceOperatorScanV2) GetScanName() string {
	if x != nil {
		return x.ScanName
	}
	return ""
}

func (x *ComplianceOperatorScanV2) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceOperatorScanV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ComplianceOperatorScanV2) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ComplianceOperatorScanV2) GetProfile() []*ProfileShim {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ComplianceOperatorScanV2) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComplianceOperatorScanV2) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ComplianceOperatorScanV2) GetScanType() ScanType {
	if x != nil {
		return x.ScanType
	}
	return ScanType_UNSET_SCAN_TYPE
}

func (x *ComplianceOperatorScanV2) GetNodeSelector() NodeRole {
	if x != nil {
		return x.NodeSelector
	}
	return NodeRole_INFRA
}

func (x *ComplianceOperatorScanV2) GetStatus() *ScanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ComplianceOperatorScanV2) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ComplianceOperatorScanV2) GetLastExecutedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastExecutedTime
	}
	return nil
}

// ComplianceOperatorProfileClusterEdge maps which profiles exist on which clusters
// Next Tag: 4
type ComplianceOperatorProfileClusterEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProfileId string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ComplianceOperatorProfileClusterEdge) Reset() {
	*x = ComplianceOperatorProfileClusterEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorProfileClusterEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorProfileClusterEdge) ProtoMessage() {}

func (x *ComplianceOperatorProfileClusterEdge) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorProfileClusterEdge.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorProfileClusterEdge) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{8}
}

func (x *ComplianceOperatorProfileClusterEdge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceOperatorProfileClusterEdge) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ComplianceOperatorProfileClusterEdge) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ComplianceOperatorProfileV2_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
}

func (x *ComplianceOperatorProfileV2_Rule) Reset() {
	*x = ComplianceOperatorProfileV2_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_compliance_operator_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceOperatorProfileV2_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceOperatorProfileV2_Rule) ProtoMessage() {}

func (x *ComplianceOperatorProfileV2_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_storage_compliance_operator_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceOperatorProfileV2_Rule.ProtoReflect.Descriptor instead.
func (*ComplianceOperatorProfileV2_Rule) Descriptor() ([]byte, []int) {
	return file_storage_compliance_operator_v2_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ComplianceOperatorProfileV2_Rule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

var File_storage_compliance_operator_v2_proto protoreflect.FileDescriptor

var file_storage_compliance_operator_v2_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a,
	0x0f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x01,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x69, 0x6d, 0x12, 0x67, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x2d,
	0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x56, 0x32, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x08, 0x0a, 0x1b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x73, 0x71, 0x6c, 0x3a, 0x22,
	0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0x82, 0xb5, 0x18, 0x67, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x3b, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x6e, 0x82, 0xb5, 0x18, 0x6a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x3b, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20,
	0x54, 0x79, 0x70, 0x65, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x49, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x56, 0x32, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x82, 0xb5, 0x18, 0x43, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x3a, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x2c, 0x6e, 0x6f,
	0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x52,
	0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x06, 0x0a, 0x18, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x52, 0x75, 0x6c,
	0x65, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x82,
	0xb5, 0x18, 0x31, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x22, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x82, 0xb5, 0x18,
	0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x0b,
	0x72, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0x82, 0xb5, 0x18, 0x2a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x54, 0x79, 0x70, 0x65,
	0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x08,
	0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x42, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x56, 0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb5, 0x08, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x57, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x82, 0xb5, 0x18, 0x43, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x49, 0x44,
	0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x73,
	0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x28, 0x75, 0x75, 0x69, 0x64,
	0x29, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x52,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x61, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x69, 0x6d, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6c, 0x69, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x28, 0x55, 0x73, 0x65, 0x72, 0x20,
	0x49, 0x44, 0x29, 0x22, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x03, 0x0a, 0x29,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x77, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x82,
	0xb5, 0x18, 0x54, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x20, 0x49, 0x44, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x2c, 0x66, 0x6b, 0x28, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b,
	0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2c, 0x74, 0x79, 0x70, 0x65,
	0x28, 0x75, 0x75, 0x69, 0x64, 0x29, 0x22, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0x82, 0xb5, 0x18, 0x73, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x63, 0x61,
	0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x49, 0x44, 0x2c, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66,
	0x6b, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66,
	0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x52, 0x06, 0x73,
	0x63, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x84, 0x01,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x63,
	0x61, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x22, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x0c, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x73, 0x71, 0x6c,
	0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x82, 0xb5, 0x18,
	0x29, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x49, 0x44, 0x2c, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x49, 0x44, 0x2c,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x73, 0x71,
	0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x69, 0x64,
	0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x28, 0x75, 0x75, 0x69, 0x64, 0x29, 0x22, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x52,
	0x75, 0x6c, 0x65, 0x20, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x2c, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x22, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x5e, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x61, 0x6e, 0x56, 0x32, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x52, 0x06, 0x73, 0x63, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x82, 0x01, 0x82,
	0xb5, 0x18, 0x7e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x20, 0x49, 0x44, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x28, 0x75, 0x75, 0x69, 0x64, 0x29,
	0x22, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x43, 0x4f, 0x4e,
	0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x22, 0x56, 0x0a, 0x0a, 0x53, 0x63, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xdf, 0x08, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x32, 0x12, 0x1c,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08,
	0x73, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x83, 0x01, 0x0a,
	0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0x82, 0xb5, 0x18, 0x59, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x32, 0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x28, 0x75, 0x75,
	0x69, 0x64, 0x29, 0x22, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0xa7, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x87, 0x01, 0x82, 0xb5, 0x18, 0x82, 0x01, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x49, 0x44, 0x2c, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x73, 0x71, 0x6c,
	0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x69, 0x64, 0x29,
	0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x28, 0x75, 0x75, 0x69, 0x64, 0x29, 0x2c, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x3b, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x69, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x63, 0x61, 0x6e, 0x56, 0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x61,
	0x6e, 0x56, 0x32, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x36,
	0x82, 0xb5, 0x18, 0x32, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x20, 0x4c, 0x61, 0x73, 0x74,
	0x20, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb6, 0x02, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x73, 0x71,
	0x6c, 0x3a, 0x22, 0x70, 0x6b, 0x2c, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x77, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x58, 0x82, 0xb5, 0x18, 0x54, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x49, 0x44, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x22, 0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x3a, 0x69, 0x64, 0x29, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x82, 0xb5, 0x18, 0x51,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x49, 0x44, 0x2c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22,
	0x20, 0x73, 0x71, 0x6c, 0x3a, 0x22, 0x66, 0x6b, 0x28, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x3a, 0x69, 0x64, 0x29, 0x2c, 0x6e, 0x6f, 0x2d, 0x66, 0x6b, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x28, 0x75, 0x75, 0x69, 0x64, 0x29,
	0x22, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x2d, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x46, 0x52,
	0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x08, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x02, 0x2a, 0xa3,
	0x01, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x17, 0x0a, 0x13, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x4f, 0x57, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x10, 0x05, 0x42, 0x26, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5a, 0x09, 0x2e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_compliance_operator_v2_proto_rawDescOnce sync.Once
	file_storage_compliance_operator_v2_proto_rawDescData = file_storage_compliance_operator_v2_proto_rawDesc
)

func file_storage_compliance_operator_v2_proto_rawDescGZIP() []byte {
	file_storage_compliance_operator_v2_proto_rawDescOnce.Do(func() {
		file_storage_compliance_operator_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_compliance_operator_v2_proto_rawDescData)
	})
	return file_storage_compliance_operator_v2_proto_rawDescData
}

var file_storage_compliance_operator_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_storage_compliance_operator_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_storage_compliance_operator_v2_proto_goTypes = []interface{}{
	(NodeRole)(0),     // 0: storage.NodeRole
	(ScanType)(0),     // 1: storage.ScanType
	(RuleSeverity)(0), // 2: storage.RuleSeverity
	(ComplianceOperatorCheckResultV2_CheckStatus)(0), // 3: storage.ComplianceOperatorCheckResultV2.CheckStatus
	(*ProfileShim)(nil),                               // 4: storage.ProfileShim
	(*ComplianceOperatorProfileV2)(nil),               // 5: storage.ComplianceOperatorProfileV2
	(*ComplianceOperatorRuleV2)(nil),                  // 6: storage.ComplianceOperatorRuleV2
	(*ComplianceOperatorScanConfigurationV2)(nil),     // 7: storage.ComplianceOperatorScanConfigurationV2
	(*ComplianceOperatorClusterScanConfigStatus)(nil), // 8: storage.ComplianceOperatorClusterScanConfigStatus
	(*ComplianceOperatorCheckResultV2)(nil),           // 9: storage.ComplianceOperatorCheckResultV2
	(*ScanStatus)(nil),                                // 10: storage.ScanStatus
	(*ComplianceOperatorScanV2)(nil),                  // 11: storage.ComplianceOperatorScanV2
	(*ComplianceOperatorProfileClusterEdge)(nil),      // 12: storage.ComplianceOperatorProfileClusterEdge
	nil,                                      // 13: storage.ComplianceOperatorProfileV2.LabelsEntry
	nil,                                      // 14: storage.ComplianceOperatorProfileV2.AnnotationsEntry
	(*ComplianceOperatorProfileV2_Rule)(nil), // 15: storage.ComplianceOperatorProfileV2.Rule
	nil,                                      // 16: storage.ComplianceOperatorRuleV2.LabelsEntry
	nil,                                      // 17: storage.ComplianceOperatorRuleV2.AnnotationsEntry
	nil,                                      // 18: storage.ComplianceOperatorScanConfigurationV2.LabelsEntry
	nil,                                      // 19: storage.ComplianceOperatorScanConfigurationV2.AnnotationsEntry
	nil,                                      // 20: storage.ComplianceOperatorCheckResultV2.LabelsEntry
	nil,                                      // 21: storage.ComplianceOperatorCheckResultV2.AnnotationsEntry
	nil,                                      // 22: storage.ComplianceOperatorScanV2.LabelsEntry
	nil,                                      // 23: storage.ComplianceOperatorScanV2.AnnotationsEntry
	(*Schedule)(nil),                         // 24: storage.Schedule
	(*timestamppb.Timestamp)(nil),            // 25: google.protobuf.Timestamp
	(*SlimUser)(nil),                         // 26: storage.SlimUser
}
var file_storage_compliance_operator_v2_proto_depIdxs = []int32{
	13, // 0: storage.ComplianceOperatorProfileV2.labels:type_name -> storage.ComplianceOperatorProfileV2.LabelsEntry
	14, // 1: storage.ComplianceOperatorProfileV2.annotations:type_name -> storage.ComplianceOperatorProfileV2.AnnotationsEntry
	15, // 2: storage.ComplianceOperatorProfileV2.rules:type_name -> storage.ComplianceOperatorProfileV2.Rule
	2,  // 3: storage.ComplianceOperatorRuleV2.severity:type_name -> storage.RuleSeverity
	16, // 4: storage.ComplianceOperatorRuleV2.labels:type_name -> storage.ComplianceOperatorRuleV2.LabelsEntry
	17, // 5: storage.ComplianceOperatorRuleV2.annotations:type_name -> storage.ComplianceOperatorRuleV2.AnnotationsEntry
	18, // 6: storage.ComplianceOperatorScanConfigurationV2.labels:type_name -> storage.ComplianceOperatorScanConfigurationV2.LabelsEntry
	19, // 7: storage.ComplianceOperatorScanConfigurationV2.annotations:type_name -> storage.ComplianceOperatorScanConfigurationV2.AnnotationsEntry
	4,  // 8: storage.ComplianceOperatorScanConfigurationV2.profiles:type_name -> storage.ProfileShim
	0,  // 9: storage.ComplianceOperatorScanConfigurationV2.node_roles:type_name -> storage.NodeRole
	24, // 10: storage.ComplianceOperatorScanConfigurationV2.schedule:type_name -> storage.Schedule
	25, // 11: storage.ComplianceOperatorScanConfigurationV2.created_time:type_name -> google.protobuf.Timestamp
	25, // 12: storage.ComplianceOperatorScanConfigurationV2.last_updated_time:type_name -> google.protobuf.Timestamp
	26, // 13: storage.ComplianceOperatorScanConfigurationV2.modified_by:type_name -> storage.SlimUser
	25, // 14: storage.ComplianceOperatorClusterScanConfigStatus.last_updated_time:type_name -> google.protobuf.Timestamp
	3,  // 15: storage.ComplianceOperatorCheckResultV2.status:type_name -> storage.ComplianceOperatorCheckResultV2.CheckStatus
	2,  // 16: storage.ComplianceOperatorCheckResultV2.severity:type_name -> storage.RuleSeverity
	20, // 17: storage.ComplianceOperatorCheckResultV2.labels:type_name -> storage.ComplianceOperatorCheckResultV2.LabelsEntry
	21, // 18: storage.ComplianceOperatorCheckResultV2.annotations:type_name -> storage.ComplianceOperatorCheckResultV2.AnnotationsEntry
	25, // 19: storage.ComplianceOperatorCheckResultV2.created_time:type_name -> google.protobuf.Timestamp
	4,  // 20: storage.ComplianceOperatorScanV2.profile:type_name -> storage.ProfileShim
	22, // 21: storage.ComplianceOperatorScanV2.labels:type_name -> storage.ComplianceOperatorScanV2.LabelsEntry
	23, // 22: storage.ComplianceOperatorScanV2.annotations:type_name -> storage.ComplianceOperatorScanV2.AnnotationsEntry
	1,  // 23: storage.ComplianceOperatorScanV2.scan_type:type_name -> storage.ScanType
	0,  // 24: storage.ComplianceOperatorScanV2.node_selector:type_name -> storage.NodeRole
	10, // 25: storage.ComplianceOperatorScanV2.status:type_name -> storage.ScanStatus
	25, // 26: storage.ComplianceOperatorScanV2.created_time:type_name -> google.protobuf.Timestamp
	25, // 27: storage.ComplianceOperatorScanV2.last_executed_time:type_name -> google.protobuf.Timestamp
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_storage_compliance_operator_v2_proto_init() }
func file_storage_compliance_operator_v2_proto_init() {
	if File_storage_compliance_operator_v2_proto != nil {
		return
	}
	file_storage_schedule_proto_init()
	file_storage_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_compliance_operator_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileShim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorProfileV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorRuleV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorScanConfigurationV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorClusterScanConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorCheckResultV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorScanV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorProfileClusterEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_compliance_operator_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceOperatorProfileV2_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_compliance_operator_v2_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_compliance_operator_v2_proto_goTypes,
		DependencyIndexes: file_storage_compliance_operator_v2_proto_depIdxs,
		EnumInfos:         file_storage_compliance_operator_v2_proto_enumTypes,
		MessageInfos:      file_storage_compliance_operator_v2_proto_msgTypes,
	}.Build()
	File_storage_compliance_operator_v2_proto = out.File
	file_storage_compliance_operator_v2_proto_rawDesc = nil
	file_storage_compliance_operator_v2_proto_goTypes = nil
	file_storage_compliance_operator_v2_proto_depIdxs = nil
}

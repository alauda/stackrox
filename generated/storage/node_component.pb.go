// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/node_component.proto

package storage

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/stackrox/rox/generated/tools"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeComponent struct {
	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version   string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Priority  int64   `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	RiskScore float32 `protobuf:"fixed32,7,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	// Types that are valid to be assigned to SetTopCvss:
	//	*NodeComponent_TopCvss
	SetTopCvss           isNodeComponent_SetTopCvss `protobuf_oneof:"set_top_cvss"`
	OperatingSystem      string                     `protobuf:"bytes,9,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *NodeComponent) Reset()         { *m = NodeComponent{} }
func (m *NodeComponent) String() string { return proto.CompactTextString(m) }
func (*NodeComponent) ProtoMessage()    {}
func (*NodeComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1117c2b5f2ac051c, []int{0}
}
func (m *NodeComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeComponent.Merge(m, src)
}
func (m *NodeComponent) XXX_Size() int {
	return m.Size()
}
func (m *NodeComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeComponent.DiscardUnknown(m)
}

var xxx_messageInfo_NodeComponent proto.InternalMessageInfo

type isNodeComponent_SetTopCvss interface {
	isNodeComponent_SetTopCvss()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isNodeComponent_SetTopCvss
}

type NodeComponent_TopCvss struct {
	TopCvss float32 `protobuf:"fixed32,8,opt,name=top_cvss,json=topCvss,proto3,oneof" json:"top_cvss,omitempty"`
}

func (*NodeComponent_TopCvss) isNodeComponent_SetTopCvss() {}
func (m *NodeComponent_TopCvss) Clone() isNodeComponent_SetTopCvss {
	if m == nil {
		return nil
	}
	cloned := new(NodeComponent_TopCvss)
	*cloned = *m

	return cloned
}

func (m *NodeComponent) GetSetTopCvss() isNodeComponent_SetTopCvss {
	if m != nil {
		return m.SetTopCvss
	}
	return nil
}

func (m *NodeComponent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeComponent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodeComponent) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *NodeComponent) GetRiskScore() float32 {
	if m != nil {
		return m.RiskScore
	}
	return 0
}

func (m *NodeComponent) GetTopCvss() float32 {
	if x, ok := m.GetSetTopCvss().(*NodeComponent_TopCvss); ok {
		return x.TopCvss
	}
	return 0
}

func (m *NodeComponent) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NodeComponent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NodeComponent_TopCvss)(nil),
	}
}

func (m *NodeComponent) MessageClone() proto.Message {
	return m.Clone()
}
func (m *NodeComponent) Clone() *NodeComponent {
	if m == nil {
		return nil
	}
	cloned := new(NodeComponent)
	*cloned = *m

	if m.SetTopCvss != nil {
		cloned.SetTopCvss = m.SetTopCvss.Clone()
	}
	return cloned
}

func init() {
	proto.RegisterType((*NodeComponent)(nil), "storage.NodeComponent")
}

func init() { proto.RegisterFile("storage/node_component.proto", fileDescriptor_1117c2b5f2ac051c) }

var fileDescriptor_1117c2b5f2ac051c = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0x9b, 0x2c, 0x90, 0x5d, 0x0b, 0x28, 0xf2, 0xc9, 0x45, 0x25, 0x32, 0x51, 0x11, 0x91,
	0x58, 0xa5, 0x08, 0x38, 0xf5, 0xc0, 0x21, 0x8b, 0xd4, 0x72, 0x01, 0x94, 0xa0, 0x1e, 0xb8, 0x44,
	0x21, 0xb1, 0x5a, 0x2b, 0xdd, 0x8c, 0xf1, 0x58, 0xab, 0xf6, 0x9a, 0xa7, 0xe0, 0x45, 0xf2, 0x0e,
	0x1c, 0x79, 0x04, 0xb4, 0x3c, 0x03, 0x77, 0x54, 0x27, 0x5e, 0x21, 0x45, 0x5c, 0x67, 0xfe, 0xef,
	0xb3, 0x67, 0x34, 0xe4, 0x10, 0x0d, 0xe8, 0xf2, 0x42, 0x1c, 0xb7, 0x50, 0x8b, 0xa2, 0x82, 0xb5,
	0x82, 0x56, 0xb4, 0x26, 0x51, 0x1a, 0x0c, 0xd0, 0x60, 0xec, 0x3e, 0xde, 0x37, 0x00, 0x57, 0x78,
	0x2c, 0xae, 0xc7, 0x4e, 0xf4, 0x67, 0x46, 0x1e, 0x7c, 0x80, 0x5a, 0xac, 0x1c, 0x41, 0x53, 0xe2,
	0xcb, 0x9a, 0x79, 0xdc, 0x8b, 0x17, 0xe9, 0xab, 0xae, 0x67, 0x09, 0x8a, 0x52, 0x57, 0x97, 0x27,
	0xd1, 0x2e, 0xc2, 0xdf, 0xbf, 0x5b, 0xde, 0x0a, 0xc5, 0xf2, 0x52, 0xd6, 0xb5, 0x68, 0x23, 0x8e,
	0xdf, 0xae, 0x4e, 0x22, 0xd5, 0x2c, 0x65, 0x1d, 0x65, 0xbe, 0xac, 0xe9, 0x4b, 0x72, 0xa7, 0x2d,
	0xd7, 0x82, 0xf9, 0xd6, 0x72, 0xd8, 0xf5, 0x8c, 0x4d, 0x2c, 0x83, 0x22, 0xca, 0x6c, 0x92, 0xbe,
	0x25, 0xc1, 0x46, 0x68, 0x94, 0xd0, 0xb2, 0x99, 0x85, 0x8e, 0xba, 0x9e, 0xf1, 0xe9, 0xd3, 0xe7,
	0x43, 0xc8, 0xc1, 0x0e, 0xa2, 0xa7, 0x64, 0xae, 0xb4, 0x04, 0x2d, 0xcd, 0x0d, 0xbb, 0xcb, 0xbd,
	0x78, 0x96, 0xbe, 0xe8, 0x7a, 0xf6, 0x7c, 0x2a, 0xc8, 0x24, 0x36, 0xfc, 0xd3, 0x18, 0x75, 0x03,
	0x64, 0x3b, 0x98, 0x9e, 0x12, 0xa2, 0x25, 0x36, 0x05, 0x56, 0xa0, 0x05, 0x0b, 0xb8, 0x17, 0xfb,
	0x69, 0xdc, 0xf5, 0xec, 0xe8, 0x3f, 0xaa, 0xbc, 0xfa, 0x67, 0x11, 0xd9, 0xe2, 0x96, 0xb5, 0x25,
	0x9a, 0x92, 0xb9, 0x01, 0x55, 0x54, 0x1b, 0x44, 0x36, 0xb7, 0x9a, 0x67, 0x5d, 0xcf, 0x9e, 0x4e,
	0x35, 0x9f, 0x41, 0xf1, 0xd5, 0x79, 0x9e, 0x8f, 0x33, 0x9d, 0xed, 0x65, 0x81, 0x01, 0xb5, 0xda,
	0x20, 0xd2, 0x33, 0xf2, 0x08, 0x94, 0xd0, 0xa5, 0x91, 0xed, 0x45, 0x81, 0x37, 0x68, 0xc4, 0x9a,
	0x2d, 0xec, 0x7a, 0x9e, 0x74, 0x3d, 0x3b, 0x70, 0xae, 0x8f, 0x2e, 0xc3, 0x73, 0x9b, 0x89, 0xb2,
	0xfd, 0x1d, 0x36, 0x54, 0xd2, 0x87, 0xe4, 0x3e, 0x0a, 0x53, 0xb8, 0x1f, 0xa5, 0x6f, 0x7e, 0x6c,
	0x43, 0xef, 0xe7, 0x36, 0xf4, 0x7e, 0x6d, 0x43, 0xef, 0xfb, 0xef, 0x70, 0x8f, 0x1c, 0x48, 0x48,
	0xd0, 0x94, 0x55, 0xa3, 0xe1, 0x7a, 0x38, 0x8e, 0x64, 0xbc, 0x9a, 0x2f, 0xee, 0x7c, 0xbe, 0xde,
	0xb3, 0xf5, 0xd7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x0e, 0xdb, 0xc9, 0x6e, 0x02, 0x00,
	0x00,
}

func (m *NodeComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OperatingSystem) > 0 {
		i -= len(m.OperatingSystem)
		copy(dAtA[i:], m.OperatingSystem)
		i = encodeVarintNodeComponent(dAtA, i, uint64(len(m.OperatingSystem)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SetTopCvss != nil {
		{
			size := m.SetTopCvss.Size()
			i -= size
			if _, err := m.SetTopCvss.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RiskScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RiskScore))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Priority != 0 {
		i = encodeVarintNodeComponent(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNodeComponent(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNodeComponent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNodeComponent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeComponent_TopCvss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeComponent_TopCvss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopCvss))))
	i--
	dAtA[i] = 0x45
	return len(dAtA) - i, nil
}
func encodeVarintNodeComponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodeComponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNodeComponent(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNodeComponent(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNodeComponent(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovNodeComponent(uint64(m.Priority))
	}
	if m.RiskScore != 0 {
		n += 5
	}
	if m.SetTopCvss != nil {
		n += m.SetTopCvss.Size()
	}
	l = len(m.OperatingSystem)
	if l > 0 {
		n += 1 + l + sovNodeComponent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeComponent_TopCvss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}

func sovNodeComponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodeComponent(x uint64) (n int) {
	return sovNodeComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RiskScore = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopCvss", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SetTopCvss = &NodeComponent_TopCvss{float32(math.Float32frombits(v))}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeComponent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeComponent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodeComponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodeComponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodeComponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodeComponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeComponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodeComponent = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/container_runtime.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/stackrox/rox/generated/tools"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContainerRuntime int32

const (
	ContainerRuntime_UNKNOWN_CONTAINER_RUNTIME ContainerRuntime = 0
	ContainerRuntime_DOCKER_CONTAINER_RUNTIME  ContainerRuntime = 1
	ContainerRuntime_CRIO_CONTAINER_RUNTIME    ContainerRuntime = 2
)

var ContainerRuntime_name = map[int32]string{
	0: "UNKNOWN_CONTAINER_RUNTIME",
	1: "DOCKER_CONTAINER_RUNTIME",
	2: "CRIO_CONTAINER_RUNTIME",
}

var ContainerRuntime_value = map[string]int32{
	"UNKNOWN_CONTAINER_RUNTIME": 0,
	"DOCKER_CONTAINER_RUNTIME":  1,
	"CRIO_CONTAINER_RUNTIME":    2,
}

func (x ContainerRuntime) String() string {
	return proto.EnumName(ContainerRuntime_name, int32(x))
}

func (ContainerRuntime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b69161c52e2baa2, []int{0}
}

type ContainerRuntimeInfo struct {
	Type                 ContainerRuntime `protobuf:"varint,1,opt,name=type,proto3,enum=storage.ContainerRuntime" json:"type,omitempty"`
	Version              string           `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ContainerRuntimeInfo) Reset()         { *m = ContainerRuntimeInfo{} }
func (m *ContainerRuntimeInfo) String() string { return proto.CompactTextString(m) }
func (*ContainerRuntimeInfo) ProtoMessage()    {}
func (*ContainerRuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b69161c52e2baa2, []int{0}
}
func (m *ContainerRuntimeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerRuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerRuntimeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerRuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerRuntimeInfo.Merge(m, src)
}
func (m *ContainerRuntimeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContainerRuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerRuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerRuntimeInfo proto.InternalMessageInfo

func (m *ContainerRuntimeInfo) GetType() ContainerRuntime {
	if m != nil {
		return m.Type
	}
	return ContainerRuntime_UNKNOWN_CONTAINER_RUNTIME
}

func (m *ContainerRuntimeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ContainerRuntimeInfo) MessageClone() proto.Message {
	return m.Clone()
}
func (m *ContainerRuntimeInfo) Clone() *ContainerRuntimeInfo {
	if m == nil {
		return nil
	}
	cloned := new(ContainerRuntimeInfo)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("storage.ContainerRuntime", ContainerRuntime_name, ContainerRuntime_value)
	proto.RegisterType((*ContainerRuntimeInfo)(nil), "storage.ContainerRuntimeInfo")
}

func init() { proto.RegisterFile("storage/container_runtime.proto", fileDescriptor_8b69161c52e2baa2) }

var fileDescriptor_8b69161c52e2baa2 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0xd5, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcc, 0xcc, 0x4b, 0x2d, 0x8a, 0x2f, 0x2a,
	0xcd, 0x2b, 0xc9, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x2a, 0x90,
	0xe2, 0x2f, 0xc9, 0xcf, 0xcf, 0x29, 0xd6, 0x4f, 0xad, 0x28, 0x81, 0xc8, 0x28, 0xb5, 0x32, 0x72,
	0x89, 0x38, 0xc3, 0x74, 0x05, 0x41, 0x34, 0x79, 0xe6, 0xa5, 0xe5, 0x0b, 0xe9, 0x72, 0xb1, 0x94,
	0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x49, 0xea, 0x41, 0x4d, 0xd0, 0x43,
	0x57, 0x1c, 0x04, 0x56, 0x26, 0x64, 0xc7, 0xc5, 0x5e, 0x96, 0x5a, 0x54, 0x9c, 0x99, 0x9f, 0x27,
	0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0xe9, 0xa4, 0xd2, 0xb4, 0x55, 0x42, 0xa1, 0x38, 0x35, 0xb1, 0x28,
	0x39, 0xc3, 0x4a, 0x09, 0xae, 0x49, 0x01, 0xaa, 0x4b, 0x07, 0x64, 0x5c, 0xaa, 0x52, 0x10, 0x4c,
	0x93, 0x56, 0x36, 0x97, 0x00, 0xba, 0xc9, 0x42, 0xb2, 0x5c, 0x92, 0xa1, 0x7e, 0xde, 0x7e, 0xfe,
	0xe1, 0x7e, 0xf1, 0xce, 0xfe, 0x7e, 0x21, 0x8e, 0x9e, 0x7e, 0xae, 0x41, 0xf1, 0x41, 0xa1, 0x7e,
	0x21, 0x9e, 0xbe, 0xae, 0x02, 0x0c, 0x42, 0x32, 0x5c, 0x12, 0x2e, 0xfe, 0xce, 0xde, 0xae, 0x41,
	0x58, 0x64, 0x19, 0x85, 0xa4, 0xb8, 0xc4, 0x9c, 0x83, 0x3c, 0xfd, 0xb1, 0xc8, 0x31, 0x39, 0x99,
	0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb,
	0x31, 0x70, 0x49, 0x66, 0xe6, 0xeb, 0x15, 0x97, 0x24, 0x26, 0x67, 0x17, 0xe5, 0x57, 0x40, 0x42,
	0x06, 0xe6, 0xe1, 0x28, 0x58, 0xd8, 0x25, 0xb1, 0x81, 0xc5, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xeb, 0x5f, 0x90, 0xdf, 0x6e, 0x01, 0x00, 0x00,
}

func (m *ContainerRuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerRuntimeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintContainerRuntime(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintContainerRuntime(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintContainerRuntime(dAtA []byte, offset int, v uint64) int {
	offset -= sovContainerRuntime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerRuntimeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovContainerRuntime(uint64(m.Type))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovContainerRuntime(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovContainerRuntime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContainerRuntime(x uint64) (n int) {
	return sovContainerRuntime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContainerRuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContainerRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContainerRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContainerRuntime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContainerRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContainerRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContainerRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContainerRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContainerRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContainerRuntime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContainerRuntime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContainerRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContainerRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContainerRuntime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContainerRuntime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContainerRuntime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContainerRuntime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContainerRuntime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContainerRuntime = fmt.Errorf("proto: unexpected end of group")
)

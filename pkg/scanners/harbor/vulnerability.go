package harbor

import (
	"github.com/stackrox/rox/generated/storage"
	v2 "github.com/stackrox/rox/pkg/cvss/cvssv2"
	v3 "github.com/stackrox/rox/pkg/cvss/cvssv3"
)

type VulnerabilityReport struct {
	GeneratedAt     string           `json:"generated_at"`
	Scanner         Scanner          `json:"scanner"`
	Severity        string           `json:"severity"`
	Vulnerabilities []*Vulnerability `json:"vulnerabilities"`
}

type Scanner struct {
	Name    string `json:"name"`
	Vendor  string `json:"vendor"`
	Version string `json:"version"`
}

type Vulnerability struct {
	ID              string   `json:"id"`
	Package         string   `json:"package"`
	Version         string   `json:"version"`
	FixVersion      string   `json:"fix_version"`
	Severity        Severity `json:"severity"`
	Description     string   `json:"description"`
	Links           []string `json:"links"`
	ArtifactDigests []string `json:"artifact_digests"`
	// PreferredCVSS    map[string]string `json:"preferred_cvss"`
	CWEIDs           []string          `json:"cwe_ids"`
	VendorAttributes *VendorAttributes `json:"vendor_attributes"`
}

type VendorAttributes struct {
	CVSS *CVSS `json:"CVSS"`
}

type CVSS struct {
	NVD *NVDCVSS `json:"nvd"`
}

type NVDCVSS struct {
	V2Score  float32 `json:"V2Score"`
	V2Vector string  `json:"V2Vector"`
	V3Score  float32 `json:"V3Score"`
	V3Vector string  `json:"V3Vector"`
}

func (v *Vulnerability) GetCvssScore() float32 {
	if v.VendorAttributes != nil && v.VendorAttributes.CVSS != nil && v.VendorAttributes.CVSS.NVD != nil {
		if v.VendorAttributes.CVSS.NVD.V3Vector != "" {
			return v.VendorAttributes.CVSS.NVD.V3Score
		} else if v.VendorAttributes.CVSS.NVD.V2Vector != "" {
			return v.VendorAttributes.CVSS.NVD.V2Score
		}
	}
	return 0
}

func (v *Vulnerability) GetCvssScoreVersion() storage.EmbeddedVulnerability_ScoreVersion {
	if v.VendorAttributes != nil && v.VendorAttributes.CVSS != nil && v.VendorAttributes.CVSS.NVD != nil {
		if v.VendorAttributes.CVSS.NVD.V3Vector != "" {
			return storage.EmbeddedVulnerability_V3
		} else if v.VendorAttributes.CVSS.NVD.V2Vector != "" {
			return storage.EmbeddedVulnerability_V2
		}
	}
	return storage.EmbeddedVulnerability_V3
}

func (v *Vulnerability) GetCvssV2Vector() *storage.CVSSV2 {
	cvssV2 := &storage.CVSSV2{}
	if v.VendorAttributes != nil && v.VendorAttributes.CVSS != nil && v.VendorAttributes.CVSS.NVD != nil {
		if v.VendorAttributes.CVSS.NVD.V2Vector != "" {
			cvssV2.Vector = v.VendorAttributes.CVSS.NVD.V2Vector
			cvssV2.Score = v.VendorAttributes.CVSS.NVD.V2Score
			cvssV2.Severity = v2.Severity(v.VendorAttributes.CVSS.NVD.V2Score)
		}
	}
	return cvssV2
}

func (v *Vulnerability) GetCvssV3Vector() *storage.CVSSV3 {
	cvssV3 := &storage.CVSSV3{}
	if v.VendorAttributes != nil && v.VendorAttributes.CVSS != nil && v.VendorAttributes.CVSS.NVD != nil {
		if v.VendorAttributes.CVSS.NVD.V3Vector != "" {
			cvssV3.Vector = v.VendorAttributes.CVSS.NVD.V3Vector
			cvssV3.Score = v.VendorAttributes.CVSS.NVD.V3Score
			cvssV3.Severity = v3.Severity(v.VendorAttributes.CVSS.NVD.V3Score)
		}
	}
	return cvssV3
}
